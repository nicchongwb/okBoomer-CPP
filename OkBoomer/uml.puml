@startuml





/' Objects '/

class Animation {
	+Animation()
	-m_Flip : SDL_RendererFlip
	-m_AnimSpeed : int
	-m_FrameCount : int
	-m_SpriteCol : int
	-m_SpriteFrame : int
	-m_SpriteRow : int
	-m_TextureID : std::string
	+Draw(float x, float y, int spriteWidth, int spriteHeight) : void
	+SetProperties(std::string textureID, int spriteRow, int spriteCol, int frameCount, int animSpeed, SDL_RendererFlip flip) : void
	+Update() : void
}


class Board {
	-Board()
	+{static} GetInstance() : Board*
	+canPlayerMove(int m_pid, int prevX, int prevY, int newX, int newY) : bool
	+canPlayerPlant(int m_pid, int prevX, int prevY) : bool
	+consoleBoard() : bool
	+initBoard() : bool
	+updateBoardMove(int m_pid, int prevX, int prevY, int newX, int newY) : bool
	+updateBoardPlant(int m_pid, int prevX, int prevY) : bool
	+getTileID(int x, int y) : int
	-m_board : int
	-{static} s_Instance : static Board*
	+updateBoardWithItem(int x, int y, int iid) : void
}


class BombCollectable {
	+BombCollectable(Properties* props)
	-m_BombItemTextureM : TextureManager*
	-m_ItemBombID : int
	-m_NumBombsSpawned : int
	-s_BombsSpawnedList : std::vector<BombCollectable>
	+getListOfSpawnedBombs() : std::vector<BombCollectable>*
	+Clean() : void
	+Draw() : void
	+Update(float dt) : void
}


class BombPlanted {
	+BombPlanted(Properties* props)
	-m_BombAnimation : Animation*
	-m_PlantedBombTexture : SDL_Texture*
	+m_countDown : bool
	+m_isBombPlanted : bool
	+m_start : long
	+{static} s_bombID : static int
	+GetBombPlantedTextureName() : std::string
	-textureName : std::string
	-s_PlantedBombList : std::vector<BombPlanted>
	+getListOfPlantedBombs() : std::vector<BombPlanted>*
	+Clean() : void
	+Draw() : void
	+Update(float dt) : void
}


abstract class Creature {
	+Creature(Properties* props)
	#m_Health : int
	#m_Speed : int
	#m_Name : std::string
	+{abstract} Clean() : void
	+{abstract} Draw() : void
	+{abstract} Update(float dt) : void
}


class DrawManager {
	+DrawManager()
	+GetPosition() : Vector2D
	-m_Force : Vector2D
	-m_Position : Vector2D
	+ApplyForce(Vector2D F) : void
	+ApplyForceX(int Fx) : void
	+ApplyForceY(int Fy) : void
	+UnsetForce() : void
	+Update() : void
}


abstract class Entity {
	+Entity(Properties* props)
	#m_Flip : SDL_RendererFlip
	#m_Transform : Transform*
	#m_Height : int
	#m_Width : int
	#m_TextureID : std::string
	+{abstract} Clean() : void
	+{abstract} Draw() : void
	+{abstract} Update(float dt) : void
}


class Game {
	-Game()
	+{static} GetInstance() : Game*
	+GetMap() : GameMap*
	-m_LevelMap : GameMap*
	+GetRenderer() : SDL_Renderer*
	-m_Renderer : SDL_Renderer*
	-m_Window : SDL_Window*
	+Clean() : bool
	+Init() : bool
	+IsRunning() : bool
	+getPlayAgain() : bool
	+getWhoWins() : bool
	-m_IsRunning : bool
	-{static} s_Instance : static Game*
	+{static} gameOver : static bool
	+{static} playAgain : static bool
	+{static} s_AlrPressedSpace : static bool
	+{static} whoWins : static bool
	+GetBombItemList() : std::vector<BombCollectable>*
	+GetBombPlantedList() : std::vector<BombPlanted>*
	+BombPlayer(int m_pid) : void
	+CollectBomb(int m_pid) : void
	+Events() : void
	+PlantBomb(int m_pid) : void
	+Quit() : void
	+Render() : void
	+SpawnItem() : void
	+Update() : void
}


class GameMap {
	+GameMap()
	+GetLayers() : std::vector<Layer*>
	-m_MapLayers : std::vector<Layer*>
	+Render() : void
	+Update() : void
}


class IOHandler {
	-IOHandler()
	+{static} GetInstance() : IOHandler*
	+KeyPressed(SDL_Scancode key) : bool
	+KeyReleased(SDL_Scancode key) : bool
	-m_KeyStates : const Uint8*
	-{static} s_Instance : static IOHandler*
	-KeyDown() : void
	-KeyUp() : void
	+Listen() : void
}


abstract class IOObject {
	+{abstract} Clean() : void
	+{abstract} Draw() : void
	+{abstract} Update(float dt) : void
}


abstract class Item {
	+Item(Properties* props)
	+getItemX() : int
	+getItemY() : int
	+{abstract} Clean() : void
	+{abstract} Draw() : void
	+{abstract} Update(float dt) : void
}


class ItemTimer {
	+ItemTimer()
	+getReadyToSpawn() : bool
	+getTimerHasStarted() : bool
	-m_ReadyToSpawn : bool
	-m_TimerHasStarted : bool
	-intRand(const int& min, const int& max) : int
	-m_timerThread : std::thread
	+setReadyToSpawn(bool val) : void
	+setTimerHasStarted(bool val) : void
	+startTimer() : void
	+stopTimer() : void
}


abstract class Layer {
	+{abstract} Render() : void
	+{abstract} Update() : void
}


class MapParser {
	-MapParser()
	+GetMap(std::string id) : GameMap*
	+{static} GetInstance() : MapParser*
	-ParseTileLayer(TiXmlElement* xmlLayer, std::vector<Tileset> tilesets, int tilesize, int rowcount, int colcount) : TileLayer*
	-ParseTileset(TiXmlElement* xmlTileset) : Tileset
	+Load() : bool
	-Parse(std::string id, std::string source) : bool
	-{static} s_Instance : static MapParser*
	-m_MapDict : std::map<std::string, GameMap*>
	+Clean() : void
}


class Menu {
	-Menu()
	+{static} GetInstance() : Menu*
	+GetRenderer() : SDL_Renderer*
	-m_Renderer : SDL_Renderer*
	-m_Window : SDL_Window*
	+Clean() : bool
	+Init() : bool
	+IsRunning() : bool
	-m_IsRunning : bool
	-{static} s_Instance : static Menu*
	+{static} s_AlrPressedSpace : static bool
	+Events() : void
	+Quit() : void
	+Render() : void
}


class Player {
	+Player(Properties* props)
	-m_Animation : Animation*
	-m_DrawManager : DrawManager*
	-m_bombPlaced : bool
	-m_getBombed : bool
	-m_putBomb : bool
	+GetBomb() : int
	+GetBombCol() : int
	+GetHealth() : int
	-m_Health : int
	-m_Speed : int
	-m_bombCollectable : int
	-m_bombHeld : int
	-m_bombx : int
	-m_bomby : int
	-m_pid : int
	-newX : int
	-newY : int
	+{static} s_AlrPressedP1 : static bool
	+{static} s_AlrPressedP2 : static bool
	+{static} s_countdown : static bool
	+{static} s_PlayerCount : static int
	+{static} s_p1facing : static int
	+{static} s_p2facing : static int
	+{static} s_start : static long
	+Clean() : void
	+Draw() : void
	+GetInput() : void
	+Update(float dt) : void
	+bombCountdown() : void
	+collectBomb() : void
	+getBombedAnimation() : void
	+getCurrentAnimation() : void
	+placeBombCountdown(BombPlanted bombPlanted) : void
	+plantBomb() : void
	+takeDamage() : void
}


class TextureManager {
	-TextureManager()
	+GetTexture(std::string id) : SDL_Texture*
	+GetFont(std::string) : TTF_Font*
	+{static} GetInstance() : TextureManager*
	+Load(std::string id, std::string filename) : bool
	-{static} s_Instance : static TextureManager*
	-m_TextureMap : std::map<std::string, SDL_Texture*>
	-fonts : std::map<std::string, TTF_Font*>
	+AddFont(std::string, std::string, int) : void
	+Clean() : void
	+Draw(std::string id, int x, int y, int width, int height, int row, int col, SDL_RendererFlip flip) : void
	+DrawFrame(std::string id, int x, int y, int width, int height, int row, int col, int frame, SDL_RendererFlip flip) : void
	+DrawIcon(std::string id, int x, int y, int width, int height, int row, int col, SDL_RendererFlip flip) : void
	+DrawTile(std::string tilesetID, int tileSize, int x, int y, int row, int frame, SDL_RendererFlip flip) : void
	+Drop(std::string id) : void
}


class TiXmlAttribute {
	-TiXmlAttribute(const TiXmlAttribute &)
	+TiXmlAttribute()
	+TiXmlAttribute(const std::string& _name, const std::string& _value)
	+TiXmlAttribute(const char* _name, const char* _value)
	-name : TIXML_STRING
	-value : TIXML_STRING
	+NameTStr() : TIXML_STRING& {query}
	+Next() : TiXmlAttribute* {query}
	+Next() : TiXmlAttribute*
	+Previous() : TiXmlAttribute* {query}
	+Previous() : TiXmlAttribute*
	-next : TiXmlAttribute*
	-prev : TiXmlAttribute*
	-document : TiXmlDocument*
	+operator<(const TiXmlAttribute& rhs) : bool {query}
	+operator==(const TiXmlAttribute& rhs) : bool {query}
	+operator>(const TiXmlAttribute& rhs) : bool {query}
	+Name() : char* {query}
	+Parse(const char* p, TiXmlParsingData* data, TiXmlEncoding encoding) : char*
	+Value() : char* {query}
	+DoubleValue() : double {query}
	+IntValue() : int {query}
	+QueryDoubleValue(double* _value) : int {query}
	+QueryIntValue(int* _value) : int {query}
	+ValueStr() : std::string& {query}
	+Print(FILE* cfile, int depth) : void {query}
	+Print(FILE* cfile, int depth, TIXML_STRING* str) : void {query}
	+SetDocument(TiXmlDocument* doc) : void
	+SetDoubleValue(double _value) : void
	+SetIntValue(int _value) : void
	+SetName(const char* _name) : void
	+SetName(const std::string& _name) : void
	+SetValue(const char* _value) : void
	+SetValue(const std::string& _value) : void
	-operator=(const TiXmlAttribute& base) : void
}


class TiXmlAttributeSet {
	-TiXmlAttributeSet(const TiXmlAttributeSet &)
	+TiXmlAttributeSet()
	+~TiXmlAttributeSet()
	-sentinel : TiXmlAttribute
	+Find(const char* _name) : TiXmlAttribute* {query}
	+Find(const std::string& _name) : TiXmlAttribute* {query}
	+FindOrCreate(const char* _name) : TiXmlAttribute*
	+FindOrCreate(const std::string& _name) : TiXmlAttribute*
	+First() : TiXmlAttribute* {query}
	+First() : TiXmlAttribute*
	+Last() : TiXmlAttribute* {query}
	+Last() : TiXmlAttribute*
	+Add(TiXmlAttribute* attribute) : void
	+Remove(TiXmlAttribute* attribute) : void
	-operator=(const TiXmlAttributeSet &) : void
}


abstract class TiXmlBase {
	-TiXmlBase(const TiXmlBase &)
	+TiXmlBase()
	+~TiXmlBase()
	-{static} entity : Entity
	#location : TiXmlCursor
	#{static} IsWhiteSpace(char c) : bool
	#{static} IsWhiteSpace(int c) : bool
	+{static} IsWhiteSpaceCondensed() : bool
	#{static} StreamTo(std::istream* in, int character, TIXML_STRING* tag) : bool
	#{static} StreamWhiteSpace(std::istream* in, TIXML_STRING* tag) : bool
	#{static} StringEqual(const char* p, const char* endTag, bool ignoreCase, TiXmlEncoding encoding) : bool
	#{static} GetChar(const char* p, char* _value, int* length, TiXmlEncoding encoding) : char*
	#{static} GetEntity(const char* in, char* value, int* length, TiXmlEncoding encoding) : char*
	+{abstract} Parse(const char* p, TiXmlParsingData* data, TiXmlEncoding encoding) : char*
	#{static} ReadName(const char* p, TIXML_STRING* name, TiXmlEncoding encoding) : char*
	#{static} ReadText(const char* in, TIXML_STRING* text, bool ignoreWhiteSpace, const char* endTag, bool ignoreCase, TiXmlEncoding encoding) : char*
	#{static} SkipWhiteSpace(const char*, TiXmlEncoding encoding) : char*
	+Column() : int {query}
	#{static} IsAlpha(unsigned char anyByte, TiXmlEncoding encoding) : int
	#{static} IsAlphaNum(unsigned char anyByte, TiXmlEncoding encoding) : int
	+Row() : int {query}
	#{static} ToLower(int v, TiXmlEncoding encoding) : int
	-{static} condenseWhiteSpace : static bool
	#{static} errorString : static const char*
	+{static} utf8ByteTable : static const int
	#{static} ConvertUTF32ToUTF8(unsigned long input, char* output, int* length) : void
	+{static} EncodeString(const TIXML_STRING& str, TIXML_STRING* out) : void
	+{abstract} Print(FILE* cfile, int depth) : void {query}
	+{static} SetCondenseWhiteSpace(bool condense) : void
	+SetUserData(void* user) : void
	-operator=(const TiXmlBase& base) : void
	+GetUserData() : void*
	+GetUserData() : void* {query}
	#userData : void*
}


class TiXmlComment {
	+TiXmlComment()
	+TiXmlComment(const char* _value)
	+TiXmlComment(const TiXmlComment &)
	+~TiXmlComment()
	+operator=(const TiXmlComment& base) : TiXmlComment&
	+ToComment() : TiXmlComment* {query}
	+ToComment() : TiXmlComment*
	+Clone() : TiXmlNode* {query}
	+Accept(TiXmlVisitor* visitor) : bool {query}
	+Parse(const char* p, TiXmlParsingData* data, TiXmlEncoding encoding) : char*
	#CopyTo(TiXmlComment* target) : void {query}
	+Print(FILE* cfile, int depth) : void {query}
	#StreamIn(std::istream* in, TIXML_STRING* tag) : void
}


class TiXmlDeclaration {
	+TiXmlDeclaration()
	+TiXmlDeclaration(const std::string& _version, const std::string& _encoding, const std::string& _standalone)
	+TiXmlDeclaration(const char* _version, const char* _encoding, const char* _standalone)
	+TiXmlDeclaration(const TiXmlDeclaration& copy)
	+~TiXmlDeclaration()
	-encoding : TIXML_STRING
	-standalone : TIXML_STRING
	-version : TIXML_STRING
	+operator=(const TiXmlDeclaration& copy) : TiXmlDeclaration&
	+ToDeclaration() : TiXmlDeclaration* {query}
	+ToDeclaration() : TiXmlDeclaration*
	+Clone() : TiXmlNode* {query}
	+Accept(TiXmlVisitor* visitor) : bool {query}
	+Encoding() : char* {query}
	+Parse(const char* p, TiXmlParsingData* data, TiXmlEncoding encoding) : char*
	+Standalone() : char* {query}
	+Version() : char* {query}
	#CopyTo(TiXmlDeclaration* target) : void {query}
	+Print(FILE* cfile, int depth, TIXML_STRING* str) : void {query}
	+Print(FILE* cfile, int depth) : void {query}
	#StreamIn(std::istream* in, TIXML_STRING* tag) : void
}


class TiXmlDocument {
	+TiXmlDocument()
	+TiXmlDocument(const char* documentName)
	+TiXmlDocument(const std::string& documentName)
	+TiXmlDocument(const TiXmlDocument& copy)
	+~TiXmlDocument()
	-errorDesc : TIXML_STRING
	-errorLocation : TiXmlCursor
	+operator=(const TiXmlDocument& copy) : TiXmlDocument&
	+ToDocument() : TiXmlDocument* {query}
	+ToDocument() : TiXmlDocument*
	+RootElement() : TiXmlElement* {query}
	+RootElement() : TiXmlElement*
	#Clone() : TiXmlNode* {query}
	+Accept(TiXmlVisitor* content) : bool {query}
	+Error() : bool {query}
	+LoadFile(TiXmlEncoding encoding) : bool
	+LoadFile(const char* filename, TiXmlEncoding encoding) : bool
	+LoadFile(FILE*, TiXmlEncoding encoding) : bool
	+LoadFile(const std::string& filename, TiXmlEncoding encoding) : bool
	+SaveFile() : bool {query}
	+SaveFile(const char* filename) : bool {query}
	+SaveFile(FILE*) : bool {query}
	+SaveFile(const std::string& filename) : bool {query}
	-error : bool
	-useMicrosoftBOM : bool
	+ErrorDesc() : char* {query}
	+Parse(const char* p, TiXmlParsingData* data, TiXmlEncoding encoding) : char*
	+ErrorCol() : int {query}
	+ErrorId() : int {query}
	+ErrorRow() : int {query}
	+TabSize() : int {query}
	-errorId : int
	-tabsize : int
	+ClearError() : void
	-CopyTo(TiXmlDocument* target) : void {query}
	+Print() : void {query}
	+Print(FILE* cfile, int depth) : void {query}
	+SetError(int err, const char* errorLocation, TiXmlParsingData* prevData, TiXmlEncoding encoding) : void
	+SetTabSize(int _tabsize) : void
	#StreamIn(std::istream* in, TIXML_STRING* tag) : void
}


class TiXmlElement {
	+TiXmlElement(const char* in_value)
	+TiXmlElement(const std::string& _value)
	+TiXmlElement(const TiXmlElement &)
	+~TiXmlElement()
	+FirstAttribute() : TiXmlAttribute* {query}
	+FirstAttribute() : TiXmlAttribute*
	+LastAttribute() : TiXmlAttribute* {query}
	+LastAttribute() : TiXmlAttribute*
	-attributeSet : TiXmlAttributeSet
	+operator=(const TiXmlElement& base) : TiXmlElement&
	+ToElement() : TiXmlElement* {query}
	+ToElement() : TiXmlElement*
	+Clone() : TiXmlNode* {query}
	+Accept(TiXmlVisitor* visitor) : bool {query}
	+Attribute(const char* name) : char* {query}
	+Attribute(const char* name, int* i) : char* {query}
	+Attribute(const char* name, double* d) : char* {query}
	+GetText() : char* {query}
	+Parse(const char* p, TiXmlParsingData* data, TiXmlEncoding encoding) : char*
	#ReadValue(const char* in, TiXmlParsingData* prevData, TiXmlEncoding encoding) : char*
	+QueryBoolAttribute(const char* name, bool* _value) : int {query}
	+QueryDoubleAttribute(const char* name, double* _value) : int {query}
	+QueryDoubleAttribute(const std::string& name, double* _value) : int {query}
	+QueryFloatAttribute(const char* name, float* _value) : int {query}
	+QueryIntAttribute(const char* name, int* _value) : int {query}
	+QueryIntAttribute(const std::string& name, int* _value) : int {query}
	+QueryStringAttribute(const char* name, std::string* _value) : int {query}
	+QueryUnsignedAttribute(const char* name, unsigned* _value) : int {query}
	+QueryValueAttribute(const std::string& name, T* outValue) : int {query}
	+QueryValueAttribute(const std::string& name, std::string* outValue) : int {query}
	+Attribute(const std::string& name) : std::string* {query}
	+Attribute(const std::string& name, int* i) : std::string* {query}
	+Attribute(const std::string& name, double* d) : std::string* {query}
	#ClearThis() : void
	#CopyTo(TiXmlElement* target) : void {query}
	+Print(FILE* cfile, int depth) : void {query}
	+RemoveAttribute(const char* name) : void
	+RemoveAttribute(const std::string& name) : void
	+SetAttribute(const char* name, const char* _value) : void
	+SetAttribute(const std::string& name, const std::string& _value) : void
	+SetAttribute(const std::string& name, int _value) : void
	+SetAttribute(const char* name, int value) : void
	+SetDoubleAttribute(const std::string& name, double value) : void
	+SetDoubleAttribute(const char* name, double value) : void
	#StreamIn(std::istream* in, TIXML_STRING* tag) : void
}


class TiXmlHandle {
	+TiXmlHandle(TiXmlNode* _node)
	+TiXmlHandle(const TiXmlHandle& ref)
	+Element() : TiXmlElement* {query}
	+ToElement() : TiXmlElement* {query}
	+Child(const char* value, int index) : TiXmlHandle {query}
	+Child(int index) : TiXmlHandle {query}
	+Child(const std::string& _value, int index) : TiXmlHandle {query}
	+ChildElement(const char* value, int index) : TiXmlHandle {query}
	+ChildElement(int index) : TiXmlHandle {query}
	+ChildElement(const std::string& _value, int index) : TiXmlHandle {query}
	+FirstChild() : TiXmlHandle {query}
	+FirstChild(const char* value) : TiXmlHandle {query}
	+FirstChild(const std::string& _value) : TiXmlHandle {query}
	+FirstChildElement() : TiXmlHandle {query}
	+FirstChildElement(const char* value) : TiXmlHandle {query}
	+FirstChildElement(const std::string& _value) : TiXmlHandle {query}
	+operator=(const TiXmlHandle& ref) : TiXmlHandle
	+Node() : TiXmlNode* {query}
	+ToNode() : TiXmlNode* {query}
	-node : TiXmlNode*
	+Text() : TiXmlText* {query}
	+ToText() : TiXmlText* {query}
	+ToUnknown() : TiXmlUnknown* {query}
	+Unknown() : TiXmlUnknown* {query}
}


abstract class TiXmlNode {
	-TiXmlNode(const TiXmlNode &)
	#TiXmlNode(NodeType _type)
	+~TiXmlNode()
	#type : NodeType
	#value : TIXML_STRING
	+ValueTStr() : TIXML_STRING& {query}
	+ToComment() : TiXmlComment* {query}
	+ToComment() : TiXmlComment*
	+ToDeclaration() : TiXmlDeclaration* {query}
	+ToDeclaration() : TiXmlDeclaration*
	+GetDocument() : TiXmlDocument* {query}
	+GetDocument() : TiXmlDocument*
	+ToDocument() : TiXmlDocument* {query}
	+ToDocument() : TiXmlDocument*
	+FirstChildElement() : TiXmlElement* {query}
	+FirstChildElement() : TiXmlElement*
	+FirstChildElement(const char* _value) : TiXmlElement* {query}
	+FirstChildElement(const char* _value) : TiXmlElement*
	+FirstChildElement(const std::string& _value) : TiXmlElement* {query}
	+FirstChildElement(const std::string& _value) : TiXmlElement*
	+NextSiblingElement() : TiXmlElement* {query}
	+NextSiblingElement() : TiXmlElement*
	+NextSiblingElement(const char*) : TiXmlElement* {query}
	+NextSiblingElement(const char* _next) : TiXmlElement*
	+NextSiblingElement(const std::string& _value) : TiXmlElement* {query}
	+NextSiblingElement(const std::string& _value) : TiXmlElement*
	+ToElement() : TiXmlElement* {query}
	+ToElement() : TiXmlElement*
	+{abstract} Clone() : TiXmlNode* {query}
	+FirstChild() : TiXmlNode* {query}
	+FirstChild() : TiXmlNode*
	+FirstChild(const char* value) : TiXmlNode* {query}
	+FirstChild(const char* _value) : TiXmlNode*
	+FirstChild(const std::string& _value) : TiXmlNode* {query}
	+FirstChild(const std::string& _value) : TiXmlNode*
	#Identify(const char* start, TiXmlEncoding encoding) : TiXmlNode*
	+InsertAfterChild(TiXmlNode* afterThis, const TiXmlNode& addThis) : TiXmlNode*
	+InsertBeforeChild(TiXmlNode* beforeThis, const TiXmlNode& addThis) : TiXmlNode*
	+InsertEndChild(const TiXmlNode& addThis) : TiXmlNode*
	+IterateChildren(const TiXmlNode* previous) : TiXmlNode* {query}
	+IterateChildren(const TiXmlNode* previous) : TiXmlNode*
	+IterateChildren(const char* value, const TiXmlNode* previous) : TiXmlNode* {query}
	+IterateChildren(const char* _value, const TiXmlNode* previous) : TiXmlNode*
	+IterateChildren(const std::string& _value, const TiXmlNode* previous) : TiXmlNode* {query}
	+IterateChildren(const std::string& _value, const TiXmlNode* previous) : TiXmlNode*
	+LastChild() : TiXmlNode* {query}
	+LastChild() : TiXmlNode*
	+LastChild(const char* value) : TiXmlNode* {query}
	+LastChild(const char* _value) : TiXmlNode*
	+LastChild(const std::string& _value) : TiXmlNode* {query}
	+LastChild(const std::string& _value) : TiXmlNode*
	+LinkEndChild(TiXmlNode* addThis) : TiXmlNode*
	+NextSibling(const std::string& _value) : TiXmlNode* {query}
	+NextSibling(const std::string& _value) : TiXmlNode*
	+NextSibling() : TiXmlNode* {query}
	+NextSibling() : TiXmlNode*
	+NextSibling(const char*) : TiXmlNode* {query}
	+NextSibling(const char* _next) : TiXmlNode*
	+Parent() : TiXmlNode*
	+Parent() : TiXmlNode* {query}
	+PreviousSibling() : TiXmlNode* {query}
	+PreviousSibling() : TiXmlNode*
	+PreviousSibling(const char*) : TiXmlNode* {query}
	+PreviousSibling(const char* _prev) : TiXmlNode*
	+PreviousSibling(const std::string& _value) : TiXmlNode* {query}
	+PreviousSibling(const std::string& _value) : TiXmlNode*
	+ReplaceChild(TiXmlNode* replaceThis, const TiXmlNode& withThis) : TiXmlNode*
	#firstChild : TiXmlNode*
	#lastChild : TiXmlNode*
	#next : TiXmlNode*
	#parent : TiXmlNode*
	#prev : TiXmlNode*
	+ToText() : TiXmlText* {query}
	+ToText() : TiXmlText*
	+ToUnknown() : TiXmlUnknown* {query}
	+ToUnknown() : TiXmlUnknown*
	+{abstract} Accept(TiXmlVisitor* visitor) : bool {query}
	+NoChildren() : bool {query}
	+RemoveChild(TiXmlNode* removeThis) : bool
	+Value() : char* {query}
	+Type() : int {query}
	+operator>>(std::istream& in, TiXmlNode& base) : std :: istream&
	+operator<<(std::ostream& out, const TiXmlNode& base) : std :: ostream&
	+operator<<(std::string& out, const TiXmlNode& base) : std :: string&
	+ValueStr() : std::string& {query}
	+Clear() : void
	#CopyTo(TiXmlNode* target) : void {query}
	+SetValue(const char* _value) : void
	+SetValue(const std::string& _value) : void
	#{abstract} StreamIn(std::istream* in, TIXML_STRING* tag) : void
	-operator=(const TiXmlNode& base) : void
}


class TiXmlOutStream {
	+operator<<(const TiXmlString& in) : TiXmlOutStream&
	+operator<<(const char* in) : TiXmlOutStream&
}


class TiXmlPrinter {
	+TiXmlPrinter()
	-buffer : TIXML_STRING
	-indent : TIXML_STRING
	-lineBreak : TIXML_STRING
	+Visit(const TiXmlDeclaration& declaration) : bool
	+Visit(const TiXmlText& text) : bool
	+Visit(const TiXmlComment& comment) : bool
	+Visit(const TiXmlUnknown& unknown) : bool
	+VisitEnter(const TiXmlDocument& doc) : bool
	+VisitEnter(const TiXmlElement& element, const TiXmlAttribute* firstAttribute) : bool
	+VisitExit(const TiXmlDocument& doc) : bool
	+VisitExit(const TiXmlElement& element) : bool
	-simpleTextPrint : bool
	+CStr() : char*
	+Indent() : char*
	+LineBreak() : char*
	-depth : int
	+Size() : size_t
	+Str() : std::string&
	-DoIndent() : void
	-DoLineBreak() : void
	+SetIndent(const char* _indent) : void
	+SetLineBreak(const char* _lineBreak) : void
	+SetStreamPrinting() : void
}


class TiXmlString {
	+TiXmlString()
	+TiXmlString(const TiXmlString& copy)
	+~TiXmlString()
	-{static} nullrep_ : Rep
	-rep_ : Rep
	+TiXmlString(const char* copy) : TIXML_EXPLICIT
	+TiXmlString(const char* str, size_type len) : TIXML_EXPLICIT
	+append(const char* str, size_type len) : TiXmlString&
	+assign(const char* str, size_type len) : TiXmlString&
	+operator+=(const char* suffix) : TiXmlString&
	+operator+=(char single) : TiXmlString&
	+operator+=(const TiXmlString& suffix) : TiXmlString&
	+operator=(const char* copy) : TiXmlString&
	+operator=(const TiXmlString& copy) : TiXmlString&
	+empty() : bool {query}
	+at(size_type index) : char& {query}
	+operator[](size_type index) : char& {query}
	+c_str() : char* {query}
	+data() : char* {query}
	-finish() : char* {query}
	-start() : char* {query}
	+capacity() : size_type {query}
	+find(char lookup) : size_type {query}
	+find(char tofind, size_type offset) : size_type {query}
	+length() : size_type {query}
	+size() : size_type {query}
	+{static} npos : static const size_type
	+clear() : void
	-init(size_type sz) : void
	-init(size_type sz, size_type cap) : void
	-quit() : void
	+reserve(size_type cap) : void
	-set_size(size_type sz) : void
	+swap(TiXmlString& other) : void
}


class TiXmlText {
	+TiXmlText(const char* initValue)
	+TiXmlText(const std::string& initValue)
	+TiXmlText(const TiXmlText& copy)
	+~TiXmlText()
	#Clone() : TiXmlNode* {query}
	+operator=(const TiXmlText& base) : TiXmlText&
	+ToText() : TiXmlText* {query}
	+ToText() : TiXmlText*
	+Accept(TiXmlVisitor* content) : bool {query}
	#Blank() : bool {query}
	+CDATA() : bool {query}
	-cdata : bool
	+Parse(const char* p, TiXmlParsingData* data, TiXmlEncoding encoding) : char*
	#CopyTo(TiXmlText* target) : void {query}
	+Print(FILE* cfile, int depth) : void {query}
	+SetCDATA(bool _cdata) : void
	#StreamIn(std::istream* in, TIXML_STRING* tag) : void
}


class TiXmlUnknown {
	+TiXmlUnknown()
	+TiXmlUnknown(const TiXmlUnknown& copy)
	+~TiXmlUnknown()
	+Clone() : TiXmlNode* {query}
	+operator=(const TiXmlUnknown& copy) : TiXmlUnknown&
	+ToUnknown() : TiXmlUnknown* {query}
	+ToUnknown() : TiXmlUnknown*
	+Accept(TiXmlVisitor* content) : bool {query}
	+Parse(const char* p, TiXmlParsingData* data, TiXmlEncoding encoding) : char*
	#CopyTo(TiXmlUnknown* target) : void {query}
	+Print(FILE* cfile, int depth) : void {query}
	#StreamIn(std::istream* in, TIXML_STRING* tag) : void
}


class TiXmlVisitor {
	+~TiXmlVisitor()
	+Visit(const TiXmlDeclaration &) : bool
	+Visit(const TiXmlText &) : bool
	+Visit(const TiXmlComment &) : bool
	+Visit(const TiXmlUnknown &) : bool
	+VisitEnter(const TiXmlDocument &) : bool
	+VisitEnter(const TiXmlElement &, const TiXmlAttribute*) : bool
	+VisitExit(const TiXmlDocument &) : bool
	+VisitExit(const TiXmlElement &) : bool
}


class Tile {
	-Tile()
	-{static} s_Instance : static Tile*
	-m_Tile : std::map<std::string, SDL_Texture*>
}


class TileLayer {
	+TileLayer(int tilesize, int width, int height, vector<std::vector<int>> tilemap, vector<Tileset> tilesets)
	+GetTileMap() : TileMap
	-m_ColCount : int
	-m_RowCount : int
	-m_TileSize : int
	-m_Tilesets : vector<Tileset>
	-m_Tilemap : vector<std::vector<int>>
	+Render() : void
	+Update() : void
}


class Transform {
	+Transform(int x, int y)
	+X : int
	+Y : int
	+Log(std::string msg) : void
	+Translate(Vector2D v) : void
	+TranslateX(int x) : void
	+TranslateY(int y) : void
}


class UILabel {
	+UILabel(int xpos, int ypos, std::string text, std::string font, SDL_Color& colour)
	-textColour : SDL_Color
	-position : SDL_Rect
	-labelTexture : SDL_Texture*
	-labelFont : std::string
	-labelText : std::string
	+SetLabelText(std::string text, std::string font) : void
	+draw() : void
}


class Vector2D {
	+Vector2D(int x, int y)
	+operator+(const Vector2D& v2) : Vector2D {query}
	+operator-(const Vector2D& v2) : Vector2D {query}
	+X : int
	+Y : int
	+Log(std::string msg) : void
}


enum TiXmlBase::empty {
	MAX_ENTITY_LENGTH
	NUM_ENTITY
}


enum TiXmlBase::empty {
	TIXML_ERROR
	TIXML_ERROR_DOCUMENT_EMPTY
	TIXML_ERROR_DOCUMENT_TOP_ONLY
	TIXML_ERROR_EMBEDDED_NULL
	TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME
	TIXML_ERROR_OPENING_FILE
	TIXML_ERROR_PARSING_CDATA
	TIXML_ERROR_PARSING_COMMENT
	TIXML_ERROR_PARSING_DECLARATION
	TIXML_ERROR_PARSING_ELEMENT
	TIXML_ERROR_PARSING_EMPTY
	TIXML_ERROR_PARSING_UNKNOWN
	TIXML_ERROR_READING_ATTRIBUTES
	TIXML_ERROR_READING_ELEMENT_VALUE
	TIXML_ERROR_READING_END_TAG
	TIXML_ERROR_STRING_COUNT
	TIXML_NO_ERROR
}


enum TiXmlEncoding {
	TIXML_ENCODING_LEGACY
	TIXML_ENCODING_UNKNOWN
	TIXML_ENCODING_UTF8
}


enum TiXmlNode::NodeType {
	TINYXML_COMMENT
	TINYXML_DECLARATION
	TINYXML_DOCUMENT
	TINYXML_ELEMENT
	TINYXML_TEXT
	TINYXML_TYPECOUNT
	TINYXML_UNKNOWN
}


enum empty {
	TIXML_NO_ATTRIBUTE
	TIXML_SUCCESS
	TIXML_WRONG_TYPE
}


class Properties {
	+Properties(std::string textureID, int x, int y, int width, int height, SDL_RendererFlip flip)
	+Flip : SDL_RendererFlip
	+Height : int
	+PrevX : int
	+PrevY : int
	+Width : int
	+X : int
	+Y : int
	+TextureID : std::string
}


class TiXmlBase::Entity {
	+chr : char
	+str : const char*
	+strLength : unsigned int
}


class TiXmlCursor {
	+TiXmlCursor()
	+col : int
	+row : int
	+Clear() : void
}


class TiXmlString::Rep {
	+str : char
	+capacity : size_type
	+size : size_type
}


class Tileset {
	+ColCount : int
	+FirstID : int
	+LastID : int
	+RowCount : int
	+TileCount : int
	+TileSize : int
	+Name : std::string
	+Source : std::string
}





/' Inheritance relationships '/

.Creature <|-- .Player


.Entity <|-- .Creature


.Entity <|-- .Item


.IOObject <|-- .Entity


.Item <|-- .BombCollectable


.Item <|-- .BombPlanted


.Layer <|-- .TileLayer


.TiXmlBase <|-- .TiXmlAttribute


.TiXmlBase <|-- .TiXmlNode


.TiXmlNode <|-- .TiXmlComment


.TiXmlNode <|-- .TiXmlDeclaration


.TiXmlNode <|-- .TiXmlDocument


.TiXmlNode <|-- .TiXmlElement


.TiXmlNode <|-- .TiXmlText


.TiXmlNode <|-- .TiXmlUnknown


.TiXmlString <|-- .TiXmlOutStream


.TiXmlVisitor <|-- .TiXmlPrinter





/' Aggregation relationships '/

.Board o-- .Board


.BombCollectable *-- .BombCollectable


.BombCollectable o-- .TextureManager


.BombPlanted o-- .Animation


.BombPlanted *-- .BombPlanted


.DrawManager "2" *-- .Vector2D


.Entity o-- .Transform


.Game o-- .Game


.Game o-- .GameMap


.GameMap o-- .Layer


.IOHandler o-- .IOHandler


.MapParser o-- .GameMap


.MapParser o-- .MapParser


.Menu o-- .Menu


.Player o-- .Animation


.Player o-- .DrawManager


.TextureManager o-- .TextureManager


.TiXmlAttribute "2" o-- .TiXmlAttribute


.TiXmlAttribute o-- .TiXmlDocument


.TiXmlAttributeSet *-- .TiXmlAttribute


.TiXmlBase *-- .Entity


.TiXmlBase *-- .TiXmlCursor


.TiXmlDocument *-- .TiXmlCursor


.TiXmlElement *-- .TiXmlAttributeSet


.TiXmlHandle o-- .TiXmlNode


.TiXmlNode "5" o-- .TiXmlNode


.Tile o-- .Tile


.TileLayer *-- .Tileset






/' Nested objects '/

.TiXmlBase +-- .TiXmlBase::Entity


.TiXmlBase +-- .TiXmlBase::empty


.TiXmlBase +-- .TiXmlBase::empty


.TiXmlNode +-- .TiXmlNode::NodeType


.TiXmlString +-- .TiXmlString::Rep




@enduml
